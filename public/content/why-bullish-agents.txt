In NYC it feels like everybody is bullish on AI agents. Go to any AI event, tell any VC the codeword “AI agents,” and they will stare at you with reverence, their minds churning as they devise a grand plan for sliding into your next funding round. But let’s take a step back for a minute and ask the question: should we really be bullish on AI agents?

First and foremost, we should define what is actually meant by an “AI agent.” In this article, I am specifically referring to agents that interact on top of a software layer, such as the product that Adept AI was trying to build. And it is precisely these kinds of agents which I argue will not deliver on their anticipated business value.

### The Value of B2B Software

Let’s think for a moment about the value of a piece of B2B software. The software defines a human interface by which people can solve problems for their business. The chief difficulty is building a product expressive enough to satisfy every customer’s needs, while being simple enough to avoid overcomplicating the UX.

Enter AI agents—the prophesized savior to set tech free, once and for all. The vision is that people will no longer have to use a mouse and a pointer when interacting with technology; rather, they simply express, in natural language, what task they want solved, and the agent will solve it. The agents operate on the layer of abstraction of the software itself, which is presumably a less technical, and therefore easier, medium on which to operate.

### In Practice

Now that we’ve outlined the pipe dream of AI agents, let’s analyze how they actually work in practice. To start, users don’t want agents, at least in their current form—they would instead prefer to interact with a well-designed application. Remember, good software should not be tedious to use! Instead, the vast majority of user flows should fall under some simple control flow intentionally designed to be understandable and easy to learn. A business that is building agents to act on top of their own software is doomed to fail, because even if their agent were successful, it would indicate a failure of the product itself.

This argument is not enough to discredit agents. You might still hypothesize that the value proposition of a general-purpose web agent is to act as a well-designed wrapper on top of poorly-designed software incumbents, like some enterprise Workday features. As of now, AI technology is not good enough to reliably and correctly execute an irreversible user flow, and is not good enough at identifying when a user’s request cannot safely be satisfied. You might correctly point out that AI will rapidly become better. But consider the counterbalancing effect: as AI gets better, software will quickly become cheaper to write (take Cursor and Cognition as examples). And as software gets cheaper to write, the value proposition of these general-purpose agents gets thinner, since more software will become better designed and more bespoke to the specific asks of each enterprise customer (at the same cost). So even if the bet in AI pans out, software agents still don’t seem to be a good investment!

### Parting Thoughts

For the reasons previously outlined, it seems unlikely to me that the outcome of this AI revolution will be a world where humans interact with agents acting on legacy software. I am not bearish on AI in general. In fact, I think the arguments outlined in this essay give way to the following insights:

The reason why AI hasn’t been as useful in many domains as anticipated is because good software is designed to hit 90% of uses in the “happy” case, where simple, deterministic workflows precisely satisfy a user’s end goal. AI does not generally help in these cases. So at best AI can play to the 10% remaining—not a very ambitious goal. What if, instead of using AI at the user layer, we incorporated it into software one step higher? Traditionally, this would be the engineering layer. But what if you took a Palantir-like approach, where you tried building a new layer of software, above the engineering layer, designed specifically to be amenable to AI tooling and easier than coding, ultimately improving customization velocity? Some companies already seem to be trying this approach—for example, NYC-based Thread AI, and London-based Agemo. Only time will tell if these paths are fruitful. Regardless, I am bullish that these new companies will uncover new insights about how to use AI in software, above and beyond all the agent-maxxing YC startups.
